import React, { useState, useEffect } from 'react';
import './ImageEditForm.css';
import { useLocation, useNavigate } from 'react-router-dom';

import EditedImageCanvas from './EditedImageCanvas'
import ImageProcessing from './ImageProcessing';
import Martkov from './martkov';

/**
 * Renders an ImageEditForm component
 *
 * State: isLoading: (bool)
 *        editedPixelData: pixel data on the canvas element
 *              as [r1,g1,b1,s1, ...]
 *        originalImage: <HTMLImageElement> once loaded
 */

function ImageEditForm({ deleteImage }: { deleteImage: Function }) {

    // gets url passed as state from DisplayImageMini
    const location = useLocation();
    const { url, title } = location.state;

    const [originalImage, setOriginalImage] = useState<ImageBitmap | undefined>(undefined);
    const [isLoading, setIsLoading] = useState(true);
    const [originalPixelData, setOriginalPixelData] = useState<ImageData>(
        {
            data: undefined,
            colorSpace: undefined,
            height: 0,
            width: 0,
        }
    );
    const [editedPixelData, setEditedPixelData] = useState<ImageData[]>([]);
    const [formData, setFormData] = useState({
        red: 100,
        green: 100,
        blue: 100,
        contrast: 0
    });
    // console.log("what is originalData", originalPixelData);
    // console.log("what is last editedData", editedPixelData[editedPixelData.length - 1]);
    // console.log("what is formData", formData)
    // const nWidth = originalImage?.naturalWidth || 0
    // const nHeight = originalImage?.naturalHeight || 0;
    // const cWidth = originalImage?.clientWidth || 0;
    // const cHeight = originalImage?.clientHeight || 0;
    // const dWidthRatio = nWidth/cWidth || 0;
    // const dHeightRatio = nHeight/cHeight || 0;


    // console.log("nwidth", nWidth, "nHeight", nHeight, "cWidth", cWidth, "dWidth", dWidthRatio);

    const navigate = useNavigate();

    // useEffect(function setCanvasImageOnMount() {
    //     async function setCanvasImage() {
    //         console.log("setting canvas image first time only");
    //         if (originalImage !== undefined && editedPixelData.length === 0) {
    //             const imgData = ImageProcessing.setInitialCanvasDisplay(originalImage)
    //             setOriginalPixelData(imgData);
    //             setEditedPixelData([...editedPixelData, imgData])
    //         }
    //         setIsLoading(false);
    //     }
    //     setCanvasImage();
    // }, [originalImage]);

    useEffect(function setOriginalImageDataOnLoad(){
        async function setOriginalImageData(){
            let result = await ImageProcessing.createOriginalImageData(url);
            setOriginalImage(result);
            setIsLoading(false);
        }
        setOriginalImageData();
    }, []);

    function handleChange(evt: React.ChangeEvent<HTMLInputElement>) {
        const { name, value } = evt.target;
        setFormData((fData) => ({
            ...fData,
            [name]: value,
        }));
    }

    //Set the original image once it has fully loaded
    // function imageIsLoaded() {
    //     let image = document.getElementById("original-image") as HTMLImageElement
    //     setOriginalImage(image);
    // }

    function resetImage() {
        ImageProcessing.displayEditedImage(editedPixelData[0]);
        setEditedPixelData([...editedPixelData, editedPixelData[0]]);
        setFormData({
            red: 100,
            green: 100,
            blue: 100,
            contrast: 0
        });
    }

    //Uses original image data and converts to greyscale
    function makeImageGreyScale() {
        const newPixelData =
            ImageProcessing.makeImageGreyScale(originalPixelData);
        updateImage(newPixelData);

    }

    function makeImageSepia() {
        const newPixelData =
            ImageProcessing.makeImageSepia(originalPixelData);
        updateImage(newPixelData);
    }


    function makeMartkov() {
        const pixelChain = Martkov.getDoublePixelChains(originalPixelData);
        console.log("what are the chainzzzzz", pixelChain)
        const newPixelData =
            Martkov.changeDoublePixelValues(originalPixelData, pixelChain);
        updateImage(newPixelData);
    }

    function updateColors() {
        const { red, green, blue, contrast } = formData;
        const newPixelData =
            ImageProcessing.changeColors(originalPixelData, red, green, blue, contrast);
        updateImage(newPixelData);
    }

    function updateImage(newPixelData) {
        const updatedImageData =
            new ImageData(newPixelData, nWidth, nHeight, { colorSpace: 'srgb' });
        console.log("what is updated image", updatedImageData)
        ImageProcessing.displayEditedImage(updatedImageData);
        setEditedPixelData([...editedPixelData, updatedImageData]);
    }

    async function handleDeleteImage() {

        try {
            const result = await deleteImage(url);
            navigate('/')
            console.log("success, result is: ", result)
        } catch (err: any) {
            console.log("delete error", err);
        }

    }
    if (isLoading) {
        return <p>Loading &hellip;</p>;
    }
    return (
        <div className='ImageEditForm'>

            {/* <button onClick={handleDeleteImage}>Delete!</button> */}
            <button onClick={resetImage}>Reset</button>
            <button onClick={makeImageGreyScale}>Grey!</button>
            <button onClick={makeImageSepia}>Sepia!</button>
            {/* <button onClick={makeMartkov}>Martkov!</button> */}
            <label>
                Red %:
                <input
                    type="range"
                    name="red"
                    value={formData.red}
                    onChange={handleChange}
                    onInput={updateColors}
                    step='5'
                />
            </label>
            <label>
                Green %:
                <input
                    type="range"
                    name="green"
                    value={formData.green}
                    onChange={handleChange}
                    onInput={updateColors}
                    step='5'
                />
            </label>
            <label>
                Blue %:
                <input
                    type="range"
                    name="blue"
                    value={formData.blue}
                    onChange={handleChange}
                    onInput={updateColors}
                    step='5'
                />
            </label>
            <label>
                Contrast:
                <input
                    type="range"
                    name="contrast"
                    value={formData.contrast}
                    min='-10'
                    max='10'
                    onChange={handleChange}
                    onInput={updateColors}
                />
            </label>
            <div className="imagesDisplay">
                <div className='ImageEditForm-original'>
                    {/* <img
                        id="original-image"
                        src={url}
                        alt={title}
                        onLoad={imageIsLoaded}
                        // must be set before image loads
                        crossOrigin="anonymous"
                        </img>
                    > */}
                    <canvas
                        id="original-image"
                        width={originalImage.width}
                        height={originalImage.height}
                    />

                </div>
                <EditedImageCanvas width={nWidth/(dWidthRatio||1)} height={nHeight/(dHeightRatio||1)} />
            </div>
        </div>
    );
}

export default ImageEditForm;
